import streamlit as st
import pandas as pd
import altair as alt
from datetime import datetime, time

# Kezdeti √°llapot
if "fuvarok" not in st.session_state:
    st.session_state.fuvarok = pd.DataFrame(columns=["Rendsz√°m", "Fuvar neve", "Kateg√≥ria", "Megrendel≈ë", "Kezdete", "V√©ge"])

if "jarmuvek" not in st.session_state:
    st.session_state.jarmuvek = ["AO-BK-447", "RXD-624"]

if "kategoriak" not in st.session_state:
    st.session_state.kategoriak = ["Belf√∂ldi", "K√ºlf√∂ldi", "Di√°kcsoport", "Szerviz"]

if "megrendelok" not in st.session_state:
    st.session_state.megrendelok = pd.DataFrame(columns=["N√©v", "Telefonsz√°m", "Email"])

# F≈ëc√≠m
st.title("üöå Fuvarszervez≈ë Id≈ëvonal Alkalmaz√°s")

# Men√ºpontok
tab1, tab2, tab3, tab4 = st.tabs(["üìÖ Id≈ëvonal", "‚ûï √öj fuvar", "‚öôÔ∏è Be√°ll√≠t√°sok", "üßæ Megrendel≈ëk"])

# 1. ID≈êVONAL n√©zet
with tab1:
    st.header("Fuvarok id≈ëvonal n√©zete")
    df = st.session_state.fuvarok

    megr_szures = st.selectbox("Sz≈±r√©s megrendel≈ë szerint", ["√ñsszes"] + st.session_state.megrendelok["N√©v"].tolist())
    if megr_szures != "√ñsszes":
        df = df[df["Megrendel≈ë"] == megr_szures]

    if not df.empty:
        chart_data = df.copy()
        chart_data["Kezdete"] = pd.to_datetime(chart_data["Kezdete"])
        chart_data["V√©ge"] = pd.to_datetime(chart_data["V√©ge"])

        chart = alt.Chart(chart_data).mark_bar().encode(
            x=alt.X('Kezdete:T', title='Kezd√©s'),
            x2='V√©ge:T',
            y=alt.Y('Rendsz√°m:N', title='J√°rm≈±'),
            color=alt.Color('Kateg√≥ria:N', legend=alt.Legend(title="Kateg√≥ria")),
            tooltip=['Fuvar neve', 'Megrendel≈ë', 'Kezdete', 'V√©ge']
        ).properties(
            height=600,
            title="üïí Fuvar id≈ëvonal"
        )

        st.altair_chart(chart, use_container_width=True)
    else:
        st.info("Nincs megjelen√≠thet≈ë fuvar.")

# 2. √öJ FUVAR
with tab2:
    st.header("√öj fuvar r√∂gz√≠t√©se")
    with st.form("fuvar_form"):
        rendszam = st.selectbox("Rendsz√°m", st.session_state.jarmuvek)
        nev = st.text_input("Fuvar neve")
        kategoria = st.selectbox("Kateg√≥ria", st.session_state.kategoriak)
        megrendelo = st.selectbox("Megrendel≈ë", [""] + st.session_state.megrendelok["N√©v"].tolist())

        kezd_datum = st.date_input("Kezd√©s d√°tuma")
        kezd_ido = st.time_input("Kezd√©s id≈ëpontja", value=time(8, 0))
        vege_datum = st.date_input("Befejez√©s d√°tuma")
        vege_ido = st.time_input("Befejez√©s id≈ëpontja", value=time(17, 0))

        submitted = st.form_submit_button("‚úÖ Fuvar ment√©se")
        if submitted:
            kezdet = datetime.combine(kezd_datum, kezd_ido)
            vege = datetime.combine(vege_datum, vege_ido)
            uj_sor = pd.DataFrame([{
                "Rendsz√°m": rendszam,
                "Fuvar neve": nev,
                "Kateg√≥ria": kategoria,
                "Megrendel≈ë": megrendelo,
                "Kezdete": kezdet,
                "V√©ge": vege
            }])
            st.session_state.fuvarok = pd.concat([st.session_state.fuvarok, uj_sor], ignore_index=True)
            st.success("üöç Fuvar sikeresen r√∂gz√≠tve!")

# 3. BE√ÅLL√çT√ÅSOK
with tab3:
    st.header("Be√°ll√≠t√°sok")

    with st.expander("üöê J√°rm≈±vek"):
        st.write(st.session_state.jarmuvek)
        uj = st.text_input("√öj rendsz√°m")
        if st.button("‚ûï Hozz√°ad√°s"):
            if uj and uj not in st.session_state.jarmuvek:
                st.session_state.jarmuvek.append(uj)
                st.success(f"{uj} hozz√°adva")
        torol = st.selectbox("T√∂rl√©s", [""] + st.session_state.jarmuvek)
        if st.button("‚ùå T√∂rl√©s") and torol:
            st.session_state.jarmuvek.remove(torol)
            st.success(f"{torol} t√∂r√∂lve")

    with st.expander("üè∑Ô∏è Kateg√≥ri√°k"):
        st.write(st.session_state.kategoriak)
        ujk = st.text_input("√öj kateg√≥ria")
        if st.button("‚ûï Kateg√≥ria"):
            if ujk and ujk not in st.session_state.kategoriak:
                st.session_state.kategoriak.append(ujk)
                st.success(f"{ujk} kateg√≥ria hozz√°adva")
        torolk = st.selectbox("Kateg√≥ria t√∂rl√©se", [""] + st.session_state.kategoriak)
        if st.button("‚ùå Kateg√≥ria t√∂rl√©se") and torolk:
            st.session_state.kategoriak.remove(torolk)
            st.success(f"{torolk} t√∂r√∂lve")

# 4. MEGRENDEL≈êK
with tab4:
    st.header("Megrendel≈ëk kezel√©se")

    with st.form("megrendelo_form"):
        nev = st.text_input("N√©v")
        tel = st.text_input("Telefonsz√°m")
        email = st.text_input("Email")
        if st.form_submit_button("‚ûï Megrendel≈ë hozz√°ad√°sa"):
            if nev and nev not in st.session_state.megrendelok["N√©v"].values:
                uj = pd.DataFrame([{"N√©v": nev, "Telefonsz√°m": tel, "Email": email}])
                st.session_state.megrendelok = pd.concat([st.session_state.megrendelok, uj], ignore_index=True)
                st.success(f"{nev} hozz√°adva")

    st.subheader("üìã Megrendel≈ëk list√°ja")
    st.dataframe(st.session_state.megrendelok, use_container_width=True)

    torolnev = st.selectbox("T√∂rlend≈ë megrendel≈ë", [""] + st.session_state.megrendelok["N√©v"].tolist())
    if st.button("‚ùå Megrendel≈ë t√∂rl√©se") and torolnev:
        st.session_state.megrendelok = st.session_state.megrendelok[st.session_state.megrendelok["N√©v"] != torolnev]
        st.success(f"{torolnev} t√∂r√∂lve")