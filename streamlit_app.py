import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, time

# Kezdeti adatok
if "fuvarok" not in st.session_state:
    st.session_state.fuvarok = pd.DataFrame(columns=["Rendsz√°m", "Fuvar neve", "Kateg√≥ria", "Megrendel≈ë", "Kezdete", "V√©ge"])

if "jarmuvek" not in st.session_state:
    st.session_state.jarmuvek = ["AO-BK-447", "RXD-624"]

if "kategoriak" not in st.session_state:
    st.session_state.kategoriak = ["Belf√∂ldi", "K√ºlf√∂ldi", "Di√°kcsoport", "Szerviz"]

if "megrendelok" not in st.session_state:
    st.session_state.megrendelok = pd.DataFrame(columns=["N√©v", "Telefonsz√°m", "Email"])

st.title("üöå Fuvarszervez≈ë Id≈ëvonal Alkalmaz√°s")

tab1, tab2, tab3, tab4 = st.tabs(["üìÖ Id≈ëvonal", "‚ûï √öj fuvar", "‚öôÔ∏è Be√°ll√≠t√°sok", "üßæ Megrendel≈ëk"])

# 1. ID≈êVONAL
with tab1:
    st.header("Fuvarok id≈ëvonal n√©zete")
    df = st.session_state.fuvarok

    # Sz≈±r√©s megrendel≈ë szerint
    megr_szures = st.selectbox("Sz≈±r√©s megrendel≈ë szerint", ["√ñsszes"] + st.session_state.megrendelok["N√©v"].tolist())
    if megr_szures != "√ñsszes":
        df = df[df["Megrendel≈ë"] == megr_szures]

    if not df.empty:
        fig = px.timeline(
            df,
            x_start="Kezdete",
            x_end="V√©ge",
            y="Rendsz√°m",
            color="Kateg√≥ria",
            text="Fuvar neve",
        )
        fig.update_yaxes(autorange="reversed")
        fig.update_layout(height=800, margin=dict(l=20, r=20, t=30, b=20))
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Nincs megjelen√≠thet≈ë fuvar.")

# 2. √öJ FUVAR
with tab2:
    st.header("√öj fuvar r√∂gz√≠t√©se")
    with st.form("fuvar_form"):
        rendszam = st.selectbox("Rendsz√°m", st.session_state.jarmuvek)
        nev = st.text_input("Fuvar neve")
        kategoria = st.selectbox("Kateg√≥ria", st.session_state.kategoriak)
        megrendelo = st.selectbox("Megrendel≈ë", [""] + st.session_state.megrendelok["N√©v"].tolist())

        kezd_datum = st.date_input("Kezd≈ë d√°tum")
        kezd_ido = st.time_input("Kezd√©s id≈ëpontja", value=time(8, 0))
        vege_datum = st.date_input("Z√°r√≥ d√°tum")
        vege_ido = st.time_input("Befejez√©s id≈ëpontja", value=time(17, 0))

        submitted = st.form_submit_button("Fuvar ment√©se")
        if submitted:
            kezdet = datetime.combine(kezd_datum, kezd_ido)
            vege = datetime.combine(vege_datum, vege_ido)
            uj_sor = pd.DataFrame([{
                "Rendsz√°m": rendszam,
                "Fuvar neve": nev,
                "Kateg√≥ria": kategoria,
                "Megrendel≈ë": megrendelo,
                "Kezdete": kezdet,
                "V√©ge": vege
            }])
            st.session_state.fuvarok = pd.concat([st.session_state.fuvarok, uj_sor], ignore_index=True)
            st.success("Fuvar sikeresen hozz√°adva!")

# 3. BE√ÅLL√çT√ÅSOK
with tab3:
    st.header("Be√°ll√≠t√°sok")

    # J√°rm≈±vek kezel√©se
    with st.expander("üöç J√°rm≈±vek kezel√©se"):
        st.write("**Akt√≠v j√°rm≈±vek:**")
        st.write(st.session_state.jarmuvek)
        col1, col2 = st.columns(2)
        with col1:
            uj_jarmu = st.text_input("√öj rendsz√°m")
        with col2:
            if st.button("‚ûï Hozz√°ad√°s", key="jarmu_hozza"):
                if uj_jarmu and uj_jarmu not in st.session_state.jarmuvek:
                    st.session_state.jarmuvek.append(uj_jarmu)
                    st.success(f"{uj_jarmu} hozz√°adva")
        rendszam_torol = st.selectbox("Rendsz√°m t√∂rl√©se", [""] + st.session_state.jarmuvek)
        if st.button("‚ùå T√∂rl√©s", key="jarmu_torol") and rendszam_torol:
            st.session_state.jarmuvek.remove(rendszam_torol)
            st.success(f"{rendszam_torol} t√∂r√∂lve")

    # Kateg√≥ri√°k kezel√©se
    with st.expander("üè∑Ô∏è Kateg√≥ri√°k kezel√©se"):
        st.write("**Akt√≠v kateg√≥ri√°k:**")
        st.write(st.session_state.kategoriak)
        uj_kategoria = st.text_input("√öj kateg√≥ria")
        if st.button("‚ûï Kateg√≥ria hozz√°ad√°sa"):
            if uj_kategoria and uj_kategoria not in st.session_state.kategoriak:
                st.session_state.kategoriak.append(uj_kategoria)
                st.success(f"{uj_kategoria} kateg√≥ria hozz√°adva")
        torlendo_kategoria = st.selectbox("Kateg√≥ria t√∂rl√©se", [""] + st.session_state.kategoriak)
        if st.button("‚ùå Kateg√≥ria t√∂rl√©se") and torlendo_kategoria:
            st.session_state.kategoriak.remove(torlendo_kategoria)
            st.success(f"{torlendo_kategoria} t√∂r√∂lve")

# 4. MEGRENDEL≈êK
with tab4:
    st.header("Megrendel≈ëk kezel√©se")

    with st.form("megrendelo_form"):
        nev = st.text_input("N√©v")
        telefon = st.text_input("Telefonsz√°m")
        email = st.text_input("Email c√≠m")
        hozzaad = st.form_submit_button("‚ûï Megrendel≈ë hozz√°ad√°sa")

        if hozzaad:
            if nev and nev not in st.session_state.megrendelok["N√©v"].values:
                uj = pd.DataFrame([{"N√©v": nev, "Telefonsz√°m": telefon, "Email": email}])
                st.session_state.megrendelok = pd.concat([st.session_state.megrendelok, uj], ignore_index=True)
                st.success(f"{nev} hozz√°adva")

    st.subheader("Megrendel≈ëk list√°ja")
    st.dataframe(st.session_state.megrendelok, use_container_width=True)

    torol_megr = st.selectbox("T√∂rlend≈ë megrendel≈ë", [""] + st.session_state.megrendelok["N√©v"].tolist())
    if st.button("‚ùå Megrendel≈ë t√∂rl√©se") and torol_megr:
        st.session_state.megrendelok = st.session_state.megrendelok[st.session_state.megrendelok["N√©v"] != torol_megr]
        st.success(f"{torol_megr} t√∂r√∂lve")